{"version":3,"sources":["components/Carousel/Carousel.tsx","components/Carusel-setings/Carousel-setings.tsx","App.tsx","index.tsx"],"names":["Carousel","images","settings","frameSize","step","speed","width","useState","translateX","setTranslateX","nextBtnStatus","setNextBtnStatus","prevBtnStatus","setPrevBtnStatus","className","style","transform","transition","map","src","alt","disabled","type","onClick","newTranslate","scrollPrev","maxStep","scrollNext","CarouselSetings","changeInput","value","min","max","onChange","e","list","App","state","setSetings","param","newValue","currentTarget","setState","newSettings","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dd193b26.chunk.js","sourcesContent":["/* eslint-disable prefer-const */\nimport React, { useState } from 'react';\nimport './Carousel.scss';\nimport { State as Props } from '../../Types';\n\nconst Carousel: React.FC<Props> = ({ images, settings }) => {\n  const {\n    frameSize, step, speed, width,\n  } = settings;\n\n  const [translateX, setTranslateX] = useState(0);\n  let [nextBtnStatus, setNextBtnStatus] = useState(false);\n  let [prevBtnStatus, setPrevBtnStatus] = useState(true);\n\n  function scrollPrev() {\n    let newTranslate = translateX + width * step;\n\n    if (newTranslate >= 0) {\n      newTranslate = 0;\n\n      setPrevBtnStatus(true);\n      setNextBtnStatus(false);\n      setTranslateX(newTranslate);\n\n      return;\n    }\n\n    setNextBtnStatus(false);\n    setTranslateX(newTranslate);\n  }\n\n  function scrollNext() {\n    let newTranslate = translateX + -width * step;\n    let maxStep = (10 - frameSize) * -width;\n\n    if (newTranslate < maxStep) {\n      newTranslate = maxStep;\n\n      setPrevBtnStatus(false);\n      setNextBtnStatus(true);\n      setTranslateX(newTranslate);\n\n      return;\n    }\n\n    if (newTranslate === maxStep) {\n      setNextBtnStatus(true);\n    }\n\n    setPrevBtnStatus(false);\n    setTranslateX(newTranslate);\n  }\n\n  return (\n    <div className=\"Wrap\">\n      <div\n        className={`Carousel Carousel_${frameSize}`}\n        style={{ width: `${width * frameSize}px` }}\n      >\n        <ul\n          style={{\n            transform: `translate(${translateX}px)`,\n            transition: `${speed}ms`,\n          }}\n          className=\"Carousel__list\"\n        >\n          {images.map((src) => {\n            return (\n              <li\n                key={src}\n              >\n                <img\n                  src={src}\n                  alt={src}\n                  style={{ width: `${width}px` }}\n                />\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n\n      <div className=\"Carousel__btn\">\n        <button\n          disabled={prevBtnStatus}\n          type=\"button\"\n          onClick={() => {\n            scrollPrev();\n          }}\n        >\n          Prev\n        </button>\n        <button\n          disabled={nextBtnStatus}\n          type=\"button\"\n          onClick={() => {\n            scrollNext();\n          }}\n        >\n          Next\n\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Carousel;\n","import React from 'react';\nimport { CaroSettings } from '../../Types';\nimport './Carusel-setings.scss';\n\ntype Props = {\n  changeInput: (e: React.FormEvent<HTMLInputElement>, param:string) => void,\n  settings: CaroSettings;\n\n};\n\nconst CarouselSetings: React.FC<Props> = ({ changeInput, settings }) => {\n  return (\n    <div className=\"settings\">\n      <span>Image width </span>\n      <div className=\"input_wrap\">\n        <input\n          value={settings.width}\n          type=\"range\"\n          min=\"50\"\n          max=\"360\"\n          onChange={(e) => {\n            changeInput(e, 'width');\n          }}\n        />\n        <span>{settings.width}</span>\n      </div>\n      <span>Number of pictures </span>\n      <div className=\"input_wrap\">\n        <input\n          value={settings.frameSize}\n          type=\"range\"\n          min=\"1\"\n          max=\"10\"\n          step=\"1\"\n          list=\"img\"\n          onChange={(e) => {\n            changeInput(e, 'frameSize');\n          }}\n        />\n        <span>{settings.frameSize}</span>\n      </div>\n      <span>Scroll Step </span>\n      <div className=\"input_wrap\">\n        <input\n          value={settings.step}\n          type=\"range\"\n          min=\"1\"\n          max=\"10\"\n          onChange={(e) => {\n            changeInput(e, 'step');\n          }}\n        />\n        <span>{settings.step}</span>\n      </div>\n\n      <span>Animation Speed</span>\n      <div className=\"input_wrap\">\n        <input\n          value={settings.speed}\n          type=\"range\"\n          min=\"100\"\n          max=\"2000\"\n          onChange={(e) => {\n            changeInput(e, 'speed');\n          }}\n        />\n        <span>{settings.speed}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default CarouselSetings;\n","import React from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel/Carousel';\nimport CarouselSetings from './components/Carusel-setings/Carousel-setings';\nimport { State } from './Types';\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    settings: {\n      width: 130,\n      frameSize: 3,\n      step: 3,\n      speed: 1000,\n    },\n  };\n\n  setSetings = (e:React.FormEvent<HTMLInputElement>, param:string):void => {\n    const newValue:number = +e.currentTarget.value;\n\n    this.setState(({ settings }) => {\n      const newSettings = { ...settings };\n\n      newSettings[param] = newValue;\n\n      return { settings: newSettings };\n    });\n  };\n\n  render() {\n    const { images } = this.state;\n\n    return (\n      <div className=\"App\">\n        <CarouselSetings\n          settings={this.state.settings}\n          changeInput={(e, param) => {\n            this.setSetings(e, param);\n          }}\n        />\n        <Carousel\n          images={images}\n          settings={this.state.settings}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}